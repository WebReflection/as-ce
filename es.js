self.ce=function(e){"use strict";function t(e){e.call(this)}return e.default=(e,r)=>{const a=new WeakMap,l=new WeakMap,{filter:n}=[],c=(e,t)=>{for(let r=0,{length:a}=e;r<a;r++){const{target:a,attributeName:n,oldValue:c}=e[r],o=a.getAttribute(n);l.get(t).call(a,n,c,o)}},o=e=>"querySelectorAll"in e,s=e=>{for(let t=0,{length:r}=e;t<r;t++){const{addedNodes:r,removedNodes:a}=e[t];u(n.call(r,o),"c",new Set),u(n.call(a,o),"d",new Set)}},u=(e,l,n)=>{for(let c=0,{length:o}=e;c<o;c++){const o=e[c];n.has(o)||(n.add(o),a.has(o)?a.get(o)[l].forEach(t,o):"c"===l&&r(o),u(o.querySelectorAll("*"),l,n))}},d=new MutationObserver(s);return d.observe(e,{childList:!0,subtree:!0}),(e,{connectedCallback:t,disconnectedCallback:r,observedAttributes:n,attributeChangedCallback:o})=>{s(d.takeRecords());const{c:u,d:i}=a.get(e)||(e=>{const t={c:new Set,d:new Set};return a.set(e,t),t})(e);if(n){const t=new MutationObserver(c);t.observe(e,{attributes:!0,attributeOldValue:!0,attributeFilter:n.map(t=>(e.hasAttribute(t)&&o.call(e,t,null,e.getAttribute(t)),t))}),l.set(t,o)}return r&&i.add(r),t&&(u.add(t),e.ownerDocument.compareDocumentPosition(e)&e.DOCUMENT_POSITION_DISCONNECTED||t.call(e)),e}},e}({}).default;
