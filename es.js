self.ce=function(e){"use strict";function t(e){e.call(this)}return e.default=(e,r)=>{const a=new WeakMap,n=new WeakMap,l=(e,t)=>{for(let r=0,{length:a}=e;r<a;r++){const{target:a,attributeName:l,oldValue:c}=e[r],o=a.getAttribute(l);n.get(t).call(a,l,c,o)}},c=(e,n,l,o)=>{for(let s=0,{length:u}=e;s<u;s++){const u=e[s];l.has(u)||!o&&!("querySelectorAll"in u)||(l.add(u),a.has(u)?a.get(u)[n].forEach(t,u):"c"===n&&r(u),c(u.querySelectorAll("*"),n,l,!0))}},o=e=>{for(let t=0,{length:r}=e;t<r;t++){const{addedNodes:r,removedNodes:a}=e[t];c(r,"c",new Set,!1),c(a,"d",new Set,!1)}},s=new MutationObserver(o);return s.observe(e,{childList:!0,subtree:!0}),(e,{connectedCallback:t,disconnectedCallback:r,observedAttributes:c,attributeChangedCallback:u})=>{o(s.takeRecords());const{c:d,d:i}=a.get(e)||(e=>{const t={c:new Set,d:new Set};return a.set(e,t),t})(e);if(c){const t=new MutationObserver(l);t.observe(e,{attributes:!0,attributeOldValue:!0,attributeFilter:c.map(t=>(e.hasAttribute(t)&&u.call(e,t,null,e.getAttribute(t)),t))}),n.set(t,u)}return r&&i.add(r),t&&(d.add(t),e.ownerDocument.compareDocumentPosition(e)&e.DOCUMENT_POSITION_DISCONNECTED||t.call(e)),e}},e}({}).default;
